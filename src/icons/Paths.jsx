import { interpolate, useTransform } from "framer-motion";

export const gamepad =
  "M175 100V78.1231C175 76.6232 175 75.8733 174.576 75.3307C174.153 74.7882 173.425 74.6063 171.97 74.2425L128.03 63.2575C126.575 62.8937 125.847 62.7118 125.424 62.1693C125 61.6267 125 60.8768 125 59.3769V25M164.5 200H185.5C186.443 200 186.914 200 187.207 199.707C187.5 199.414 187.5 198.943 187.5 198V177C187.5 176.057 187.5 175.586 187.207 175.293C186.914 175 186.443 175 185.5 175H164.5C163.557 175 163.086 175 162.793 175.293C162.5 175.586 162.5 176.057 162.5 177V198C162.5 198.943 162.5 199.414 162.793 199.707C163.086 200 163.557 200 164.5 200ZM89.5 212.5H110.5C111.443 212.5 111.914 212.5 112.207 212.207C112.5 211.914 112.5 211.443 112.5 210.5V139.5C112.5 138.557 112.5 138.086 112.207 137.793C111.914 137.5 111.443 137.5 110.5 137.5H89.5C88.5572 137.5 88.0858 137.5 87.7929 137.793C87.5 138.086 87.5 138.557 87.5 139.5V210.5C87.5 211.443 87.5 211.914 87.7929 212.207C88.0858 212.5 88.5572 212.5 89.5 212.5ZM62.5 164.5L62.5 185.5C62.5 186.443 62.5 186.914 62.7929 187.207C63.0858 187.5 63.5572 187.5 64.5 187.5H135.5C136.443 187.5 136.914 187.5 137.207 187.207C137.5 186.914 137.5 186.443 137.5 185.5V164.5C137.5 163.557 137.5 163.086 137.207 162.793C136.914 162.5 136.443 162.5 135.5 162.5H64.5C63.5572 162.5 63.0858 162.5 62.7929 162.793C62.5 163.086 62.5 163.557 62.5 164.5ZM202 175H223C223.943 175 224.414 175 224.707 174.707C225 174.414 225 173.943 225 173V152C225 151.057 225 150.586 224.707 150.293C224.414 150 223.943 150 223 150H202C201.057 150 200.586 150 200.293 150.293C200 150.586 200 151.057 200 152V173C200 173.943 200 174.414 200.293 174.707C200.586 175 201.057 175 202 175ZM106.25 250H193.75C223.07 250 237.73 250 247.829 241.546C250.429 239.37 252.756 236.831 254.751 233.995C262.5 222.978 262.5 206.985 262.5 175C262.5 143.015 262.5 127.022 254.751 116.005C252.756 113.169 250.429 110.63 247.829 108.454C237.73 100 223.07 100 193.75 100H106.25C76.9303 100 62.2705 100 52.1714 108.454C49.5715 110.63 47.2443 113.169 45.2493 116.005C37.5 127.022 37.5 143.015 37.5 175C37.5 206.985 37.5 222.978 45.2493 233.995C47.2443 236.831 49.5715 239.37 52.1714 241.546C62.2705 250 76.9303 250 106.25 250Z";
export const user =
  "M200 87.5C200 115.114 177.614 137.5 150 137.5C122.386 137.5 100 115.114 100 87.5C100 59.8858 122.386 37.5 150 37.5C177.614 37.5 200 59.8858 200 87.5Z M66.7237 229.007C74.9872 194.086 109.647 175 145.532 175H154.468C190.354 175 225.013 194.086 233.277 229.007C235.722 239.341 237.4 250.41 237.496 261.5C237.501 262.052 237.052 262.5 236.5 262.5H63.5001C62.9478 262.5 62.4997 262.052 62.5044 261.5C62.6003 250.41 64.2782 239.341 66.7237 229.007Z";
export const home =
  "M120 262.5H112.5C88.9298 262.5 77.1447 262.5 69.8223 255.178C62.5 247.855 62.5 236.07 62.5 212.5V159.495C62.5 142.523 62.5 134.037 65.9308 126.578C69.3615 119.119 75.8046 113.596 88.6906 102.551L101.191 91.8366C124.482 71.8725 136.128 61.8904 150 61.8904C163.872 61.8904 175.518 71.8725 198.809 91.8366L211.309 102.551C224.195 113.596 230.638 119.119 234.069 126.578C237.5 134.037 237.5 142.523 237.5 159.495V212.5C237.5 236.07 237.5 247.855 230.178 255.178C222.855 262.5 211.07 262.5 187.5 262.5H180M120 262.5V192.5C120 190.614 120 189.672 120.586 189.086C121.172 188.5 122.114 188.5 124 188.5H176C177.886 188.5 178.828 188.5 179.414 189.086C180 189.672 180 190.614 180 192.5V262.5M120 262.5H180";
export const box =
  "M150 262.5V162.5M150 262.5L63.3375 200.598C62.927 200.305 62.7217 200.158 62.6108 199.943C62.5 199.728 62.5 199.475 62.5 198.971V100M150 262.5L236.662 200.598C237.073 200.305 237.278 200.158 237.389 199.943C237.5 199.728 237.5 199.475 237.5 198.971V100M150 162.5L62.5 100M150 162.5L237.5 100M62.5 100L148.838 38.3303C149.399 37.9294 149.68 37.7289 150 37.7289C150.32 37.7289 150.601 37.9294 151.162 38.3303L237.5 100";

export const getIndex = (_, index) => index;

export const useFlubber = (progress, paths) => {
  return useTransform(progress, paths.map(getIndex), paths, {
    mixer: (a, b) => interpolate(a, b, { maxSegmentLength: 0.1 }),
  });
};

export const arrGamepad = [
  "M175 100V78.1231C175 76.6232 175 75.8733 174.576 75.3307 174.153 74.7882 173.425 74.6063 171.97 74.2425L128.03 63.2575C126.575 62.8937 125.847 62.7118 125.424 62.1693 125 61.6267 125 60.8768 125 59.3769V25",
  "M164.5 200H185.5C186.443 200 186.914 200 187.207 199.707 187.5 199.414 187.5 198.943 187.5 198V177C187.5 176.057 187.5 175.586 187.207 175.293 186.914 175 186.443 175 185.5 175H164.5C163.557 175 163.086 175 162.793 175.293 162.5 175.586 162.5 176.057 162.5 177V198C162.5 198.943 162.5 199.414 162.793 199.707 163.086 200 163.557 200 164.5 200Z",
  "M89.5 212.5H110.5C111.443 212.5 111.914 212.5 112.207 212.207 112.5 211.914 112.5 211.443 112.5 210.5V139.5C112.5 138.557 112.5 138.086 112.207 137.793 111.914 137.5 111.443 137.5 110.5 137.5H89.5C88.5572 137.5 88.0858 137.5 87.7929 137.793 87.5 138.086 87.5 138.557 87.5 139.5V210.5C87.5 211.443 87.5 211.914 87.7929 212.207 88.0858 212.5 88.5572 212.5 89.5 212.5Z",
  "M62.5 164.5L62.5 185.5C62.5 186.443 62.5 186.914 62.7929 187.207 63.0858 187.5 63.5572 187.5 64.5 187.5H135.5C136.443 187.5 136.914 187.5 137.207 187.207 137.5 186.914 137.5 186.443 137.5 185.5V164.5C137.5 163.557 137.5 163.086 137.207 162.793 136.914 162.5 136.443 162.5 135.5 162.5H64.5C63.5572 162.5 63.0858 162.5 62.7929 162.793 62.5 163.086 62.5 163.557 62.5 164.5Z",
  "M202 175H223C223.943 175 224.414 175 224.707 174.707 225 174.414 225 173.943 225 173V152C225 151.057 225 150.586 224.707 150.293 224.414 150 223.943 150 223 150H202C201.057 150 200.586 150 200.293 150.293 200 150.586 200 151.057 200 152V173C200 173.943 200 174.414 200.293 174.707 200.586 175 201.057 175 202 175Z",
  "M106.25 250H193.75C223.07 250 237.73 250 247.829 241.546 250.429 239.37 252.756 236.831 254.751 233.995 262.5 222.978 262.5 206.985 262.5 175 262.5 143.015 262.5 127.022 254.751 116.005 252.756 113.169 250.429 110.63 247.829 108.454 237.73 100 223.07 100 193.75 100H106.25C76.9303 100 62.2705 100 52.1714 108.454 49.5715 110.63 47.2443 113.169 45.2493 116.005 37.5 127.022 37.5 143.015 37.5 175 37.5 206.985 37.5 222.978 45.2493 233.995 47.2443 236.831 49.5715 239.37 52.1714 241.546 62.2705 250 76.9303 250 106.25 250Z",
];
export const arrBox = [
  "M150 262.5V162.5",
  "M150 262.5L63.3375 200.598C62.927 200.305 62.7217 200.158 62.6108 199.943 62.5 199.728 62.5 199.475 62.5 198.971V100",
  "M150 262.5L236.662 200.598C237.073 200.305 237.278 200.158 237.389 199.943 237.5 199.728 237.5 199.475 237.5 198.971V100",
  "M150 162.5L62.5 100",
  "M150 162.5L237.5 100",
  "M62.5 100L148.838 38.3303C149.399 37.9294 149.68 37.7289 150 37.7289 150.32 37.7289 150.601 37.9294 151.162 38.3303L237.5 100",
];

export const arrHome = [
  "M120 262.5H112.5C88.9298 262.5 77.1447 262.5 69.8223 255.178 62.5 247.855 62.5 236.07 62.5 212.5V159.495C62.5 142.523 62.5 134.037 65.9308 126.578 69.3615 119.119 75.8046 113.596 88.6906 102.551L101.191 91.8366C124.482 71.8725 136.128 61.8904 150 61.8904 163.872 61.8904 175.518 71.8725 198.809 91.8366L211.309 102.551C224.195 113.596 230.638 119.119 234.069 126.578 237.5 134.037 237.5 142.523 237.5 159.495V212.5C237.5 236.07 237.5 247.855 230.178 255.178 222.855 262.5 211.07 262.5 187.5 262.5H180",
  "M120 262.5V192.5C120 190.614 120 189.672 120.586 189.086 121.172 188.5 122.114 188.5 124 188.5H176C177.886 188.5 178.828 188.5 179.414 189.086 180 189.672 180 190.614 180 192.5V262.5",
  "M120 262.5H180",
  "M120 262.5H112.5C88.9298 262.5 77.1447 262.5 69.8223 255.178 62.5 247.855 62.5 236.07 62.5 212.5V159.495C62.5 142.523 62.5 134.037 65.9308 126.578 69.3615 119.119 75.8046 113.596 88.6906 102.551L101.191 91.8366C124.482 71.8725 136.128 61.8904 150 61.8904 163.872 61.8904 175.518 71.8725 198.809 91.8366L211.309 102.551C224.195 113.596 230.638 119.119 234.069 126.578 237.5 134.037 237.5 142.523 237.5 159.495V212.5C237.5 236.07 237.5 247.855 230.178 255.178 222.855 262.5 211.07 262.5 187.5 262.5H180",
  "M120 262.5V192.5C120 190.614 120 189.672 120.586 189.086 121.172 188.5 122.114 188.5 124 188.5H176C177.886 188.5 178.828 188.5 179.414 189.086 180 189.672 180 190.614 180 192.5V262.5",
  "M120 262.5H180",
];
export const arrUser = [
  "M200 87.5C200 115.114 177.614 137.5 150 137.5 122.386 137.5 100 115.114 100 87.5 100 59.8858 122.386 37.5 150 37.5 177.614 37.5 200 59.8858 200 87.5Z",
  "M66.7237 229.007C74.9872 194.086 109.647 175 145.532 175H154.468C190.354 175 225.013 194.086 233.277 229.007 235.722 239.341 237.4 250.41 237.496 261.5 237.501 262.052 237.052 262.5 236.5 262.5H63.5001C62.9478 262.5 62.4997 262.052 62.5044 261.5 62.6003 250.41 64.2782 239.341 66.7237 229.007Z",
  "M200 87.5C200 115.114 177.614 137.5 150 137.5 122.386 137.5 100 115.114 100 87.5 100 59.8858 122.386 37.5 150 37.5 177.614 37.5 200 59.8858 200 87.5Z",
  "M66.7237 229.007C74.9872 194.086 109.647 175 145.532 175H154.468C190.354 175 225.013 194.086 233.277 229.007 235.722 239.341 237.4 250.41 237.496 261.5 237.501 262.052 237.052 262.5 236.5 262.5H63.5001C62.9478 262.5 62.4997 262.052 62.5044 261.5 62.6003 250.41 64.2782 239.341 66.7237 229.007Z",
  "M200 87.5C200 115.114 177.614 137.5 150 137.5 122.386 137.5 100 115.114 100 87.5 100 59.8858 122.386 37.5 150 37.5 177.614 37.5 200 59.8858 200 87.5Z",
  "M66.7237 229.007C74.9872 194.086 109.647 175 145.532 175H154.468C190.354 175 225.013 194.086 233.277 229.007 235.722 239.341 237.4 250.41 237.496 261.5 237.501 262.052 237.052 262.5 236.5 262.5H63.5001C62.9478 262.5 62.4997 262.052 62.5044 261.5 62.6003 250.41 64.2782 239.341 66.7237 229.007Z",
];


/** GOOD TEST ONE  */

// import { useState, useEffect } from "react";
// import "./app.sass";
// import {
//   gamepad,
//   user,
//   home,
//   box,
//   arrGamepad,
//   arrBox,
//   arrUser,
//   arrHome,
// } from "./icons/Paths";

// import { useSpring, animated, Spring } from "@react-spring/web";
// import { interpolate, splitPathString, interpolateAll } from "flubber";
// const paths = [arrGamepad, arrBox, arrHome, arrUser];

// function App() {
//   /** SHAPE TRANSFORM NOT TOUCH */
//   // const [activeIndex, setActiveIndex] = useState(0);
//   // const [interpolators, setInterpolators] = useState({
//   //   path: interpolateAll(paths[0], paths[1]),
//   // });
//   // const animationProps = useSpring({
//   //   from: { x: 0 },
//   //   to: {
//   //     x: 1,
//   //   },
//   //   config: {
//   //     duration: 800,
//   //   },
//   //   reset: true,
//   // });
//   // const updateShape = () => {
//   //   setActiveIndex((prev) => {
//   //     if (prev >= paths.length - 1) {
//   //       setInterpolators({
//   //         path: interpolateAll(paths[prev], paths[0], {
//   //           maxSegmentLength: 5,
//   //         }),
//   //       });
//   //       return 0;
//   //     } else {
//   //       setInterpolators({
//   //         path: interpolateAll(paths[prev], paths[prev + 1], {
//   //           maxSegmentLength: 5,
//   //         }),
//   //       });
//   //       return prev + 1;
//   //     }
//   //   });
//   // };

//   /**RANDOM VALUES TO LINES */

//   const [activeIndex, setActiveIndex] = useState(0);
//   const [prevshape, setPrevshape] = useState(paths[0]);
//   const [pause, setPause] = useState(false);
//   const [interpolators, setInterpolators] = useState({
//     prevShape: paths[1],
//     path: interpolateAll(paths[0], paths[1]),
//   });
//   const animationProps = useSpring({
//     from: { x: 0 },
//     to: {
//       x: 1,
//     },
//     config: {
//       duration: 2000,
//     },
//     reset: true,
//     onRest: () => {
//       updateShape();
//     },
//     // onResolve:()=>{console.log('hey resolve')}
//   });
//   const updateShape = () => {
//     // setActiveIndex((prev) => {
//     //   if (prev >= paths.length - 1) {
//     //     setInterpolators(
//     //       interpolateAll(paths[prev], paths[0], { maxSegmentLength: 5 })
//     //     );
//     //     return 0;
//     //   } else {
//     //     setInterpolators(
//     //       interpolateAll(paths[prev], paths[prev + 1], {
//     //         maxSegmentLength: 5,
//     //       })
//     //     );
//     //     return prev + 1;
//     //   }
//     // });

//     if (!pause) {
//       let nextShape = randomShape();
//       setInterpolators((prev) => ({
//         prevShape: nextShape,
//         path: interpolateAll(prev.prevShape, nextShape),
//       }));
//     }
//   };

//   const rand = (min, max) => {
//     return Math.floor(Math.random() * (max - min) + min);
//   };

  // const randomLine = () => {
  //   let p1 = `${rand(0, 100)} ${rand(0, 150)}`;
  //   let p2 = `${rand(100, 200)} ${rand(0, 150)}`;
  //   let p3 = `${rand(200, 300)} ${rand(0, 150)}`;
  //   let p4 = `${rand(200,300)} ${rand(150, 300)}`;
  //   let p5 = `${rand(100, 200)} ${rand(150, 300)}`;
  //   let p6 = `${rand(0, 100)} ${rand(150, 300)}`;

  //   return `M ${p1} L ${p2} L ${p3} L ${p4} L ${p5} L ${p6} L ${p1} `;
  // };

//   const randomShape = () => {
//     // let lineC = `M ${p1} L ${p2} L ${p3} L ${p4} L ${p5} L ${p6} L ${p1} `;
//     // let line1 = `M ${p1} L ${p2}`;
//     let line1 = randomLine();
//     let line2 = randomLine();
//     let line3 = randomLine();
//     let line4 = randomLine();
//     let line5 = randomLine();
//     let line6 = randomLine();

//     // console.log([line1,line2,line3,line4,line5,line6])
//     return [line1, line2, line3, line4, line5, line6];
//   };

//   useEffect(() => {
//     updateShape();
//   }, []);

//   // console.log(randomShape);

//   const stop = () => {
//     setPause(!pause);
//     let aux = Math.floor(Math.random() * 3)
//     setInterpolators((prev) => ({
//       prevShape: paths[aux],
//       path: interpolateAll(prev.prevShape, paths[aux]),
//     }));
//     // updateShape();
//   };

//   const leave = ()=>{
//     setPause(!pause);
//     let nextShape = randomShape();
//     setInterpolators((prev) => ({
//       prevShape: nextShape,
//       path: interpolateAll(prev.prevShape, nextShape),
//     }));
//   }

//   return (
//     <div className="root">
//       <div className="box">
//         <svg width="300" height="300" onClick={stop} onMouseEnter={stop} onMouseLeave={leave} >
//           {interpolators.path.map((item, index) => (
//             <animated.path
//               key={index}
//               d={animationProps.x.to(item)}
//               stroke="#F2C964"
//               fill="none"
//               strokeWidth={2}
//               strokeLinejoin="round"
//             ></animated.path>
//           ))}
//         </svg>
//       </div>
//     </div>
//   );
// }

// export default App;
// /**
//  * {interpolators.path.map((item, index) => (
//             <animated.path
//               key={index}
//               d={animationProps.x.to(item)}
//               stroke="#fff"
//               fill="none"
//               strokeWidth={4}
//             ></animated.path>
//           ))}
//  */
